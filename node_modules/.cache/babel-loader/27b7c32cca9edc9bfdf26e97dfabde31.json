{"ast":null,"code":"import _defineProperty from \"/Users/jiadaye/workspace/cirko/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nvar _jsxFileName = \"/Users/jiadaye/workspace/cirko/src/components/Session/withAuthentication.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React from 'react';\nimport AuthUserContext from './context';\nimport { withFirebase } from '../Firebase';\n\nconst withAuthentication = Component => {\n  class WithAuthentication extends React.Component {\n    constructor(props) {\n      super(props);\n      this.state = {\n        authUser: null\n      };\n    }\n\n    componentDidMount() {\n      this.listener = this.props.firebase.auth.onAuthStateChanged(authUser => {\n        if (authUser) {\n          this.props.firebase.user(authUser.uid).once('value').then(snapshot => {\n            const dbUser = snapshot.val(); // default empty roles\n\n            if (!dbUser.roles) {\n              dbUser.roles = {};\n            } // merge auth and db user\n\n\n            authUser = _objectSpread({\n              uid: authUser.uid,\n              email: authUser.email\n            }, dbUser);\n            this.setState({\n              authUser\n            });\n          });\n        } else {\n          this.setState({\n            authUser: null\n          });\n        }\n      });\n    }\n\n    render() {\n      return React.createElement(AuthUserContext.Provider, {\n        value: this.state.authUser,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 43\n        },\n        __self: this\n      }, React.createElement(Component, Object.assign({}, this.props, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 44\n        },\n        __self: this\n      })));\n    }\n\n    componentWillUnmount() {\n      this.listener();\n    }\n\n  }\n\n  return withFirebase(WithAuthentication);\n};\n\nexport default withAuthentication;","map":{"version":3,"sources":["/Users/jiadaye/workspace/cirko/src/components/Session/withAuthentication.js"],"names":["React","AuthUserContext","withFirebase","withAuthentication","Component","WithAuthentication","constructor","props","state","authUser","componentDidMount","listener","firebase","auth","onAuthStateChanged","user","uid","once","then","snapshot","dbUser","val","roles","email","setState","render","componentWillUnmount"],"mappings":";;;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,eAAP,MAA4B,WAA5B;AACA,SAASC,YAAT,QAA6B,aAA7B;;AACA,MAAMC,kBAAkB,GAAGC,SAAS,IAAI;AACpC,QAAMC,kBAAN,SAAiCL,KAAK,CAACI,SAAvC,CAAiD;AAC7CE,IAAAA,WAAW,CAACC,KAAD,EAAQ;AACf,YAAMA,KAAN;AACA,WAAKC,KAAL,GAAa;AACTC,QAAAA,QAAQ,EAAE;AADD,OAAb;AAGH;;AAEDC,IAAAA,iBAAiB,GAAG;AAChB,WAAKC,QAAL,GAAgB,KAAKJ,KAAL,CAAWK,QAAX,CAAoBC,IAApB,CAAyBC,kBAAzB,CACZL,QAAQ,IAAI;AACR,YAAIA,QAAJ,EAAc;AACV,eAAKF,KAAL,CAAWK,QAAX,CACKG,IADL,CACUN,QAAQ,CAACO,GADnB,EAEKC,IAFL,CAEU,OAFV,EAGKC,IAHL,CAGUC,QAAQ,IAAI;AACd,kBAAMC,MAAM,GAAGD,QAAQ,CAACE,GAAT,EAAf,CADc,CAEd;;AACA,gBAAI,CAACD,MAAM,CAACE,KAAZ,EAAmB;AACfF,cAAAA,MAAM,CAACE,KAAP,GAAe,EAAf;AACH,aALa,CAMd;;;AACAb,YAAAA,QAAQ;AACJO,cAAAA,GAAG,EAAEP,QAAQ,CAACO,GADV;AAEJO,cAAAA,KAAK,EAAEd,QAAQ,CAACc;AAFZ,eAGDH,MAHC,CAAR;AAKA,iBAAKI,QAAL,CAAc;AAAEf,cAAAA;AAAF,aAAd;AACH,WAhBL;AAiBH,SAlBD,MAkBO;AACH,eAAKe,QAAL,CAAc;AAAEf,YAAAA,QAAQ,EAAE;AAAZ,WAAd;AACH;AACJ,OAvBW,CAAhB;AAyBH;;AAEDgB,IAAAA,MAAM,GAAG;AACL,aACI,oBAAC,eAAD,CAAiB,QAAjB;AAA0B,QAAA,KAAK,EAAE,KAAKjB,KAAL,CAAWC,QAA5C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI,oBAAC,SAAD,oBAAe,KAAKF,KAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SADJ,CADJ;AAKH;;AAEDmB,IAAAA,oBAAoB,GAAG;AACnB,WAAKf,QAAL;AACH;;AA9C4C;;AAgDjD,SAAOT,YAAY,CAACG,kBAAD,CAAnB;AACH,CAlDD;;AAmDA,eAAeF,kBAAf","sourcesContent":["import React from 'react';\nimport AuthUserContext from './context';\nimport { withFirebase } from '../Firebase';\nconst withAuthentication = Component => {\n    class WithAuthentication extends React.Component {\n        constructor(props) {\n            super(props);\n            this.state = {\n                authUser: null,\n            };\n        }\n\n        componentDidMount() {\n            this.listener = this.props.firebase.auth.onAuthStateChanged(\n                authUser => {\n                    if (authUser) {\n                        this.props.firebase\n                            .user(authUser.uid)\n                            .once('value')\n                            .then(snapshot => {\n                                const dbUser = snapshot.val();\n                                // default empty roles\n                                if (!dbUser.roles) {\n                                    dbUser.roles = {};\n                                }\n                                // merge auth and db user\n                                authUser = {\n                                    uid: authUser.uid,\n                                    email: authUser.email,\n                                    ...dbUser,\n                                };\n                                this.setState({ authUser });\n                            });\n                    } else {\n                        this.setState({ authUser: null });\n                    }\n                },\n            );\n        }\n\n        render() {\n            return (\n                <AuthUserContext.Provider value={this.state.authUser}>\n                    <Component {...this.props} />\n                </AuthUserContext.Provider>\n            );\n        }\n\n        componentWillUnmount() {\n            this.listener();\n        }\n    }\n    return withFirebase(WithAuthentication);\n};\nexport default withAuthentication;"]},"metadata":{},"sourceType":"module"}