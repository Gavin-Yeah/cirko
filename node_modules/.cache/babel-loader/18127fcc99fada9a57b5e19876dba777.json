{"ast":null,"code":"import _defineProperty from \"/Users/jiadaye/workspace/cirko/node_modules/@babel/runtime/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport app from 'firebase/app';\nimport 'firebase/auth';\nimport 'firebase/firestore';\nconst config = {\n  apiKey: process.env.REACT_APP_API_KEY,\n  authDomain: process.env.REACT_APP_AUTH_DOMAIN,\n  databaseURL: process.env.REACT_APP_DATABASE_URL,\n  projectId: process.env.REACT_APP_PROJECT_ID,\n  storageBucket: process.env.REACT_APP_STORAGE_BUCKET,\n  messagingSenderId: process.env.REACT_APP_MESSAGING_SENDER_ID,\n  appId: process.env.REACT_APP_APP_ID,\n  measurementId: process.env.REACT_APP_MEASUREMENT_ID\n};\n\nclass Firebase {\n  constructor() {\n    this.doCreateUserWithEmailAndPassword = (email, password) => this.auth.createUserWithEmailAndPassword(email, password);\n\n    this.doSignInWithEmailAndPassword = (email, password) => this.auth.signInWithEmailAndPassword(email, password);\n\n    this.doSignInWithGoogle = () => this.auth.signInWithPopup(this.googleProvider);\n\n    this.doSignOut = () => this.auth.signOut();\n\n    this.doPasswordReset = email => this.auth.sendPasswordResetEmail(email);\n\n    this.doPasswordUpdate = password => this.auth.currentUser.updatePassword(password);\n\n    this.onAuthUserListener = (next, fallback) => this.auth.onAuthStateChanged(authUser => {\n      if (authUser) {\n        this.user(authUser.uid).get().then(snapshot => {\n          const dbUser = snapshot.data();\n          console.log(dbUser); // default empty roles\n          // merge auth and db user\n\n          authUser = _objectSpread({\n            uid: authUser.uid,\n            email: authUser.email\n          }, dbUser);\n          next(authUser);\n        });\n      } else {\n        fallback();\n      }\n    });\n\n    this.user = uid => this.db.doc(\"users/\".concat(uid));\n\n    this.users = () => this.db.collection('users');\n\n    app.initializeApp(config);\n    this.fieldValue = app.firestore.FieldValue;\n    this.auth = app.auth();\n    this.db = app.firestore();\n    this.googleProvider = new app.auth.GoogleAuthProvider();\n  } // *** Auth API ***\n\n\n}\n\nexport default Firebase;","map":{"version":3,"sources":["/Users/jiadaye/workspace/cirko/src/components/Firebase/firebase.js"],"names":["app","config","apiKey","process","env","REACT_APP_API_KEY","authDomain","REACT_APP_AUTH_DOMAIN","databaseURL","REACT_APP_DATABASE_URL","projectId","REACT_APP_PROJECT_ID","storageBucket","REACT_APP_STORAGE_BUCKET","messagingSenderId","REACT_APP_MESSAGING_SENDER_ID","appId","REACT_APP_APP_ID","measurementId","REACT_APP_MEASUREMENT_ID","Firebase","constructor","doCreateUserWithEmailAndPassword","email","password","auth","createUserWithEmailAndPassword","doSignInWithEmailAndPassword","signInWithEmailAndPassword","doSignInWithGoogle","signInWithPopup","googleProvider","doSignOut","signOut","doPasswordReset","sendPasswordResetEmail","doPasswordUpdate","currentUser","updatePassword","onAuthUserListener","next","fallback","onAuthStateChanged","authUser","user","uid","get","then","snapshot","dbUser","data","console","log","db","doc","users","collection","initializeApp","fieldValue","firestore","FieldValue","GoogleAuthProvider"],"mappings":"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","sourcesContent":["import app from 'firebase/app';\nimport 'firebase/auth';\nimport 'firebase/firestore';\n\n\nconst config = {\n    apiKey: process.env.REACT_APP_API_KEY,\n    authDomain: process.env.REACT_APP_AUTH_DOMAIN,\n    databaseURL: process.env.REACT_APP_DATABASE_URL,\n    projectId: process.env.REACT_APP_PROJECT_ID,\n    storageBucket: process.env.REACT_APP_STORAGE_BUCKET,\n    messagingSenderId: process.env.REACT_APP_MESSAGING_SENDER_ID,\n    appId: process.env.REACT_APP_APP_ID,\n    measurementId:process.env.REACT_APP_MEASUREMENT_ID\n};\nclass Firebase {\n    constructor() {\n        app.initializeApp(config);\n        this.fieldValue = app.firestore.FieldValue;\n        this.auth = app.auth();\n        this.db = app.firestore();\n        this.googleProvider = new app.auth.GoogleAuthProvider();\n    }\n\n    // *** Auth API ***\n    doCreateUserWithEmailAndPassword = (email, password) =>\n        this.auth.createUserWithEmailAndPassword(email, password);\n    doSignInWithEmailAndPassword = (email, password) =>\n        this.auth.signInWithEmailAndPassword(email, password);\n\n    doSignInWithGoogle = () =>\n        this.auth.signInWithPopup(this.googleProvider);\n\n\n\n    doSignOut = () => this.auth.signOut();\n    doPasswordReset = email => this.auth.sendPasswordResetEmail(email);\n    doPasswordUpdate = password =>\n        this.auth.currentUser.updatePassword(password);\n\n\n    // *** Merge Auth and DB User API *** //\n    onAuthUserListener = (next, fallback) =>\n        this.auth.onAuthStateChanged(authUser => {\n            if (authUser) {\n                this.user(authUser.uid)\n                    .get()\n                    .then(snapshot => {\n                        const dbUser = snapshot.data();\n                        console.log(dbUser)\n                        // default empty roles\n                     \n                        // merge auth and db user\n                        authUser = {\n                            uid: authUser.uid,\n                            email: authUser.email,\n                            ...dbUser,\n                        };\n                        next(authUser);\n                    });\n            } else {\n                fallback();\n            }\n        });\n\n\n    // *** User API ***\n    user = uid => this.db.doc(`users/${uid}`);\n    users = () => this.db.collection('users');\n\n\n}\nexport default Firebase;"]},"metadata":{},"sourceType":"module"}