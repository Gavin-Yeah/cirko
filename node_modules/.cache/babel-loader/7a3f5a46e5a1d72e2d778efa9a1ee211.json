{"ast":null,"code":"import { withFirebase } from '../Firebase'; // Your web app's Firebase configuration\n// Initialize Firebase\n//when user select a picture as a (head-pic)? save it to the storage\n\nfunction save_image(firebase, user_ID, Image) {\n  //get the storage reference\n  var storage = firebase.storage();\n  var storageRef = storage.ref('images/' + user_ID + '.jpg'); //store image to storage\n\n  storageRef.put(Image).then(function (snapshot) {\n    storageRef.getDownloadURL().then(url => {\n      firebase.auth.currentUser.updateProfile({\n        photoURL: url\n      }).then(() => [console.log(\"succeed\")]).catch(err => {\n        console.log(\"err\", err);\n      });\n    });\n  });\n} //when user wants to save his profile\n//if no picture selected before? should we just create a no pic?\n\n\nfunction upload_username(firebase, user_ID, user_name\n/*...*/\n) {\n  var db = firebase.firestore();\n  db.collection(\"users\").doc(user_ID).set({\n    userID: user_ID,\n    userName: user_name,\n    following: [],\n    followers: [],\n    posts: [],\n    posts_num: 0\n    /*...*/\n\n  }).then(function (docRef) {\n    firebase.auth.currentUser.updateProfile({\n      displayName: user_name\n    }).then(() => [console.log(\"succeed\")]).catch(err => {\n      console.log(\"err\", err);\n    });\n  }).catch(function (error) {\n    console.error(\"Error writing user profile to db\", error);\n  });\n} //follower wants to follow followed...Or any better name?\n\n\nfunction follow(firebase, follower_id, followed_id) {\n  //get the database reference\n  var db = firebase.firestore();\n  db.collection(\"users\").doc(follower_id).update({\n    following: firebase.firestore.FieldValue.arrayUnion(followed_id)\n  });\n  db.collection(\"users\").doc(followed_id).update({\n    followers: firebase.firestore.FieldValue.arrayUnion(follower_id)\n  });\n} //when user share a post and then you will need to save it to the database\n// passing a user obj? and a post object will be a better option.\n// post_id = user_id + \"_post_\" + posts_num.toString();!!! important\n\n\nfunction save_posts2db(firebase, user_id, posts_num, content, location, pictures) {\n  //get the database reference\n  var db = firebase.firestore(); //generate post id\n\n  var post_id = user_id + \"_post_\" + posts_num.toString();\n  posts_num = posts_num + 1; //generate time\n\n  var myDate = new Date();\n  var time = myDate.toLocaleString(); //store post into post db\n\n  db.collection(\"posts\").doc(post_id).set({\n    userID: user_id,\n    content: content,\n    location: location,\n    pictures_url: [],\n    comments: [],\n    likes: [],\n    time: time\n  }); //store images and update the url of pictures in database\n\n  save_multiple_image(firebase, post_id, pictures); //update user data base\n\n  db.collection(\"users\").doc(user_id).update({\n    posts: firebase.firestore.FieldValue.arrayUnion(post_id),\n    posts_num: posts_num\n  });\n} //when user select a picture as a (head-pic)? save it to the storage\n\n\nfunction save_multiple_image(firebase, post_id, Images) {\n  //get the storage reference\n  var storage = firebase.storage();\n  var db = firebase.firestore();\n\n  for (var i = 0; i < Images.length; i++) {\n    var storageRef = storage.ref('images/' + post_id + '_' + i.toString() + '.jpg'); //store image to storage\n\n    storageRef.put(Images[i]).then(function (snapshot) {\n      snapshot.ref.getDownloadURL().then(function (url) {\n        //update the url in DB\n        db.collection(\"posts\").doc(post_id).update({\n          pictures_url: firebase.firestore.FieldValue.arrayUnion(url)\n        });\n      }).catch(function (error) {\n        console.error(\"Error writing get URL for the image\", error);\n      });\n    });\n  }\n} //comments\n\n\nfunction comments(firebase, comment_user_id, content, post_id) {\n  //get the database reference\n  var db = firebase.firestore(); //create a comment object\n\n  var comment = {\n    content: content,\n    comment_user_id: comment_user_id,\n    post_id: post_id\n  }; //update database\n\n  db.collection(\"posts\").doc(post_id).update({\n    comments: firebase.firestore.FieldValue.arrayUnion(comment)\n  });\n} //\n//like\n\n\nfunction likes(firebase, like_user_id, post_id) {\n  //get the database reference\n  var db = firebase.firestore(); //update database\n\n  db.collection(\"posts\").doc(post_id).update({\n    likes: firebase.firestore.FieldValue.arrayUnion(like_user_id)\n  });\n}\n\nexport { save_image };","map":{"version":3,"sources":["/Users/jiadaye/workspace/cirko/src/components/Firebase/upload.js"],"names":["withFirebase","save_image","firebase","user_ID","Image","storage","storageRef","ref","put","then","snapshot","getDownloadURL","url","auth","currentUser","updateProfile","photoURL","console","log","catch","err","upload_username","user_name","db","firestore","collection","doc","set","userID","userName","following","followers","posts","posts_num","docRef","displayName","error","follow","follower_id","followed_id","update","FieldValue","arrayUnion","save_posts2db","user_id","content","location","pictures","post_id","toString","myDate","Date","time","toLocaleString","pictures_url","comments","likes","save_multiple_image","Images","i","length","comment_user_id","comment","like_user_id"],"mappings":"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","sourcesContent":["import { withFirebase } from '../Firebase';\r\n// Your web app's Firebase configuration\r\n\r\n// Initialize Firebase\r\n\r\n\r\n//when user select a picture as a (head-pic)? save it to the storage\r\nfunction save_image(firebase,user_ID, Image) {\r\n    //get the storage reference\r\n    var storage = firebase.storage();\r\n    var storageRef = storage.ref('images/'+user_ID+'.jpg');\r\n    //store image to storage\r\n    storageRef.put(Image).then(function(snapshot) {\r\n        storageRef.getDownloadURL().then((url)=>{\r\n            firebase.auth.currentUser.updateProfile({\r\n                photoURL:url\r\n            }).then(()=>[\r\n                console.log(\"succeed\")\r\n            ]).catch((err)=>{\r\n                console.log(\"err\",err)\r\n            })\r\n        })\r\n    });\r\n}\r\n\r\n//when user wants to save his profile\r\n//if no picture selected before? should we just create a no pic?\r\nfunction upload_username(firebase,user_ID, user_name/*...*/) {\r\n    var db = firebase.firestore();\r\n    db.collection(\"users\").doc(user_ID).set({\r\n        userID: user_ID,\r\n        userName: user_name,\r\n        following: [],\r\n        followers: [],\r\n        posts: [],\r\n        posts_num: 0\r\n        /*...*/\r\n    })\r\n        .then(function(docRef) {\r\n            firebase.auth.currentUser.updateProfile({\r\n                displayName: user_name,\r\n            }).then(()=>[\r\n                console.log(\"succeed\")\r\n            ]).catch((err)=>{\r\n                console.log(\"err\",err)\r\n            })\r\n        })\r\n        .catch(function(error) {\r\n            console.error(\"Error writing user profile to db\", error);\r\n        });\r\n\r\n\r\n\r\n}\r\n\r\n//follower wants to follow followed...Or any better name?\r\nfunction follow(firebase,follower_id, followed_id) {\r\n    //get the database reference\r\n    var db = firebase.firestore();\r\n    db.collection(\"users\").doc(follower_id).update( {\r\n        following: firebase.firestore.FieldValue.arrayUnion(followed_id)\r\n    })\r\n    db.collection(\"users\").doc(followed_id).update( {\r\n        followers: firebase.firestore.FieldValue.arrayUnion(follower_id)\r\n    })\r\n}\r\n\r\n//when user share a post and then you will need to save it to the database\r\n// passing a user obj? and a post object will be a better option.\r\n// post_id = user_id + \"_post_\" + posts_num.toString();!!! important\r\nfunction save_posts2db(firebase,user_id, posts_num, content, location, pictures) {\r\n    //get the database reference\r\n    var db = firebase.firestore();\r\n    //generate post id\r\n    var post_id = user_id + \"_post_\" + posts_num.toString();\r\n    posts_num = posts_num+1; \r\n    //generate time\r\n    var myDate = new Date();\r\n    var time = myDate.toLocaleString();\r\n\r\n    //store post into post db\r\n    db.collection(\"posts\").doc(post_id).set({\r\n        userID: user_id,\r\n        content: content,\r\n        location:location,\r\n        pictures_url:[],\r\n        comments:[],\r\n        likes:[],\r\n        time:time\r\n    });\r\n    \r\n    //store images and update the url of pictures in database\r\n    save_multiple_image(firebase,post_id, pictures);\r\n\r\n    //update user data base\r\n    db.collection(\"users\").doc(user_id).update({\r\n        posts : firebase.firestore.FieldValue.arrayUnion(post_id),\r\n        posts_num : posts_num\r\n    })\r\n}\r\n\r\n\r\n//when user select a picture as a (head-pic)? save it to the storage\r\nfunction save_multiple_image(firebase,post_id, Images) {\r\n    //get the storage reference\r\n    var storage = firebase.storage();\r\n    var db = firebase.firestore();\r\n    for (var i=0;i<Images.length;i++)\r\n    { \r\n        var storageRef = storage.ref('images/'+post_id+'_'+i.toString()+'.jpg'); \r\n        //store image to storage\r\n        storageRef.put(Images[i]).then(function(snapshot) {\r\n            snapshot.ref.getDownloadURL().then(function(url) {\r\n                //update the url in DB\r\n                db.collection(\"posts\").doc(post_id).update( {\r\n                    pictures_url: firebase.firestore.FieldValue.arrayUnion(url)\r\n                })\r\n            })\r\n            .catch(function(error) {\r\n                console.error(\"Error writing get URL for the image\", error);\r\n            });\r\n        });\r\n    }\r\n}\r\n\r\n\r\n//comments\r\nfunction comments(firebase,comment_user_id, content, post_id) {\r\n    //get the database reference\r\n    var db = firebase.firestore();\r\n    //create a comment object\r\n    var comment = {content:content, comment_user_id:comment_user_id, post_id:post_id};\r\n    //update database\r\n    db.collection(\"posts\").doc(post_id).update({comments : firebase.firestore.FieldValue.arrayUnion(comment)});\r\n}\r\n//\r\n\r\n//like\r\nfunction likes(firebase,like_user_id, post_id) {\r\n    //get the database reference\r\n    var db = firebase.firestore();\r\n    //update database\r\n    db.collection(\"posts\").doc(post_id).update({likes : firebase.firestore.FieldValue.arrayUnion(like_user_id)});\r\n}\r\n\r\n\r\nexport {save_image}"]},"metadata":{},"sourceType":"module"}