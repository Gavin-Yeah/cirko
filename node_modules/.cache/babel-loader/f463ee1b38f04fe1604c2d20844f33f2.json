{"ast":null,"code":"import { withFirebase } from '../Firebase'; // Your web app's Firebase configuration\n// Initialize Firebase\n//when user select a picture as a (head-pic)? save it to the storage\n\nfunction save_image(firebase, user_ID, Image) {\n  console.log(firebase.storage); // //get the storage reference\n  // var storage = firebase.storage();\n  // var storageRef = storage.ref('images/'+user_ID+'.jpg'); \n  // //store image to storage\n  // storageRef.put(Image).then(function(snapshot) {\n  //     console.log('Uploaded a blob or file!');\n  // });\n} //when user wants to save his profile\n//if no picture selected before? should we just create a no pic?\n\n\nfunction upload_user_profile(firebase, user_ID, user_name\n/*...*/\n) {\n  //get the storage reference\n  var storage = firebase.storage();\n  var storageRef = storage.ref('images/' + user_ID + '.jpg');\n  storageRef.getDownloadURL().then(function (url) {\n    //get the database reference\n    var db = firebase.firestore();\n    db.collection(\"users\").doc(user_ID).set({\n      userID: user_ID,\n      userName: user_name,\n      imageURL: url,\n      following: [],\n      followers: [],\n      posts: [],\n      posts_num: 0\n      /*...*/\n\n    }).then(function (docRef) {\n      console.log(\"Document written\");\n    }).catch(function (error) {\n      console.error(\"Error writing user profile to db\", error);\n    });\n  }).catch(function (error) {\n    storageRef = storage.ref('images/' + 'No_Avatar' + '.jpg');\n    storageRef.getDownloadURL().then(function (url) {\n      //get the database reference\n      var db = firebase.firestore();\n      db.collection(\"users\").doc(user_ID).set({\n        userID: user_ID,\n        userName: user_name,\n        imageURL: url,\n        following: [],\n        followers: [],\n        posts: [],\n        posts_num: 0\n        /*...*/\n\n      }).then(function (docRef) {\n        console.log(\"Document written\");\n      }).catch(function (error) {\n        console.error(\"Error writing no_avatar db\", error);\n      });\n    });\n  });\n} //follower wants to follow followed...Or any better name?\n\n\nfunction follow(firebase, follower_id, followed_id) {\n  //get the database reference\n  var db = firebase.firestore();\n  db.collection(\"users\").doc(follower_id).update({\n    following: firebase.firestore.FieldValue.arrayUnion(followed_id)\n  });\n  db.collection(\"users\").doc(followed_id).update({\n    followers: firebase.firestore.FieldValue.arrayUnion(follower_id)\n  });\n} //when user share a post and then you will need to save it to the database\n// passing a user obj? and a post object will be a better option.\n// post_id = user_id + \"_post_\" + posts_num.toString();!!! important\n\n\nfunction save_posts2db(firebase, user_id, posts_num, content, location, pictures) {\n  //get the database reference\n  var db = firebase.firestore(); //generate post id\n\n  var post_id = user_id + \"_post_\" + posts_num.toString();\n  posts_num = posts_num + 1; //generate time\n\n  var myDate = new Date();\n  var time = myDate.toLocaleString(); //store post into post db\n\n  db.collection(\"posts\").doc(post_id).set({\n    userID: user_id,\n    content: content,\n    location: location,\n    pictures_url: [],\n    comments: [],\n    likes: [],\n    time: time\n  }); //store images and update the url of pictures in database\n\n  save_multiple_image(firebase, post_id, pictures); //update user data base\n\n  db.collection(\"users\").doc(user_id).update({\n    posts: firebase.firestore.FieldValue.arrayUnion(post_id),\n    posts_num: posts_num\n  });\n} //when user select a picture as a (head-pic)? save it to the storage\n\n\nfunction save_multiple_image(firebase, post_id, Images) {\n  //get the storage reference\n  var storage = firebase.storage();\n  var db = firebase.firestore();\n\n  for (var i = 0; i < Images.length; i++) {\n    var storageRef = storage.ref('images/' + post_id + '_' + i.toString() + '.jpg'); //store image to storage\n\n    storageRef.put(Images[i]).then(function (snapshot) {\n      snapshot.ref.getDownloadURL().then(function (url) {\n        //update the url in DB\n        db.collection(\"posts\").doc(post_id).update({\n          pictures_url: firebase.firestore.FieldValue.arrayUnion(url)\n        });\n      }).catch(function (error) {\n        console.error(\"Error writing get URL for the image\", error);\n      });\n    });\n  }\n} //comments\n\n\nfunction comments(firebase, comment_user_id, content, post_id) {\n  //get the database reference\n  var db = firebase.firestore(); //create a comment object\n\n  var comment = {\n    content: content,\n    comment_user_id: comment_user_id,\n    post_id: post_id\n  }; //update database\n\n  db.collection(\"posts\").doc(post_id).update({\n    comments: firebase.firestore.FieldValue.arrayUnion(comment)\n  });\n} //\n//like\n\n\nfunction likes(firebase, like_user_id, post_id) {\n  //get the database reference\n  var db = firebase.firestore(); //update database\n\n  db.collection(\"posts\").doc(post_id).update({\n    likes: firebase.firestore.FieldValue.arrayUnion(like_user_id)\n  });\n}\n\nexport { save_image };","map":{"version":3,"sources":["/Users/jiadaye/workspace/cirko/src/components/Firebase/upload.js"],"names":["withFirebase","save_image","firebase","user_ID","Image","console","log","storage","upload_user_profile","user_name","storageRef","ref","getDownloadURL","then","url","db","firestore","collection","doc","set","userID","userName","imageURL","following","followers","posts","posts_num","docRef","catch","error","follow","follower_id","followed_id","update","FieldValue","arrayUnion","save_posts2db","user_id","content","location","pictures","post_id","toString","myDate","Date","time","toLocaleString","pictures_url","comments","likes","save_multiple_image","Images","i","length","put","snapshot","comment_user_id","comment","like_user_id"],"mappings":"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","sourcesContent":["import { withFirebase } from '../Firebase';\r\n// Your web app's Firebase configuration\r\n\r\n// Initialize Firebase\r\n\r\n\r\n//when user select a picture as a (head-pic)? save it to the storage\r\nfunction save_image(firebase,user_ID, Image) {\r\n    console.log(firebase.storage);\r\n    // //get the storage reference\r\n    // var storage = firebase.storage();\r\n    // var storageRef = storage.ref('images/'+user_ID+'.jpg'); \r\n    // //store image to storage\r\n    // storageRef.put(Image).then(function(snapshot) {\r\n    //     console.log('Uploaded a blob or file!');\r\n    // });\r\n}\r\n\r\n//when user wants to save his profile\r\n//if no picture selected before? should we just create a no pic?\r\nfunction upload_user_profile(firebase,user_ID, user_name/*...*/) {\r\n    //get the storage reference\r\n    var storage = firebase.storage();\r\n    var storageRef = storage.ref('images/'+user_ID+'.jpg'); \r\n    \r\n    storageRef.getDownloadURL().then(function(url) {\r\n        //get the database reference\r\n        var db = firebase.firestore();\r\n        db.collection(\"users\").doc(user_ID).set({\r\n            userID: user_ID,\r\n            userName: user_name,\r\n            imageURL:url,\r\n            following: [],\r\n            followers: [],\r\n            posts: [],\r\n            posts_num: 0\r\n            /*...*/\r\n        })\r\n        .then(function(docRef) {\r\n            console.log(\"Document written\");\r\n        })\r\n        .catch(function(error) {\r\n            console.error(\"Error writing user profile to db\", error);\r\n        });\r\n    }).catch(function(error) {\r\n        storageRef = storage.ref('images/'+'No_Avatar'+'.jpg'); \r\n        storageRef.getDownloadURL().then(function(url) {\r\n            //get the database reference\r\n            var db = firebase.firestore();\r\n            db.collection(\"users\").doc(user_ID).set({\r\n                userID: user_ID,\r\n                userName: user_name,\r\n                imageURL:url,\r\n                following: [],\r\n                followers: [],\r\n                posts: [],\r\n                posts_num: 0\r\n                /*...*/\r\n            })\r\n            .then(function(docRef) {\r\n                console.log(\"Document written\");\r\n            })\r\n            .catch(function(error) {\r\n                console.error(\"Error writing no_avatar db\", error);\r\n            });\r\n        });\r\n    });\r\n}\r\n\r\n//follower wants to follow followed...Or any better name?\r\nfunction follow(firebase,follower_id, followed_id) {\r\n    //get the database reference\r\n    var db = firebase.firestore();\r\n    db.collection(\"users\").doc(follower_id).update( {\r\n        following: firebase.firestore.FieldValue.arrayUnion(followed_id)\r\n    })\r\n    db.collection(\"users\").doc(followed_id).update( {\r\n        followers: firebase.firestore.FieldValue.arrayUnion(follower_id)\r\n    })\r\n}\r\n\r\n//when user share a post and then you will need to save it to the database\r\n// passing a user obj? and a post object will be a better option.\r\n// post_id = user_id + \"_post_\" + posts_num.toString();!!! important\r\nfunction save_posts2db(firebase,user_id, posts_num, content, location, pictures) {\r\n    //get the database reference\r\n    var db = firebase.firestore();\r\n    //generate post id\r\n    var post_id = user_id + \"_post_\" + posts_num.toString();\r\n    posts_num = posts_num+1; \r\n    //generate time\r\n    var myDate = new Date();\r\n    var time = myDate.toLocaleString();\r\n\r\n    //store post into post db\r\n    db.collection(\"posts\").doc(post_id).set({\r\n        userID: user_id,\r\n        content: content,\r\n        location:location,\r\n        pictures_url:[],\r\n        comments:[],\r\n        likes:[],\r\n        time:time\r\n    });\r\n    \r\n    //store images and update the url of pictures in database\r\n    save_multiple_image(firebase,post_id, pictures);\r\n\r\n    //update user data base\r\n    db.collection(\"users\").doc(user_id).update({\r\n        posts : firebase.firestore.FieldValue.arrayUnion(post_id),\r\n        posts_num : posts_num\r\n    })\r\n}\r\n\r\n\r\n//when user select a picture as a (head-pic)? save it to the storage\r\nfunction save_multiple_image(firebase,post_id, Images) {\r\n    //get the storage reference\r\n    var storage = firebase.storage();\r\n    var db = firebase.firestore();\r\n    for (var i=0;i<Images.length;i++)\r\n    { \r\n        var storageRef = storage.ref('images/'+post_id+'_'+i.toString()+'.jpg'); \r\n        //store image to storage\r\n        storageRef.put(Images[i]).then(function(snapshot) {\r\n            snapshot.ref.getDownloadURL().then(function(url) {\r\n                //update the url in DB\r\n                db.collection(\"posts\").doc(post_id).update( {\r\n                    pictures_url: firebase.firestore.FieldValue.arrayUnion(url)\r\n                })\r\n            })\r\n            .catch(function(error) {\r\n                console.error(\"Error writing get URL for the image\", error);\r\n            });\r\n        });\r\n    }\r\n}\r\n\r\n\r\n//comments\r\nfunction comments(firebase,comment_user_id, content, post_id) {\r\n    //get the database reference\r\n    var db = firebase.firestore();\r\n    //create a comment object\r\n    var comment = {content:content, comment_user_id:comment_user_id, post_id:post_id};\r\n    //update database\r\n    db.collection(\"posts\").doc(post_id).update({comments : firebase.firestore.FieldValue.arrayUnion(comment)});\r\n}\r\n//\r\n\r\n//like\r\nfunction likes(firebase,like_user_id, post_id) {\r\n    //get the database reference\r\n    var db = firebase.firestore();\r\n    //update database\r\n    db.collection(\"posts\").doc(post_id).update({likes : firebase.firestore.FieldValue.arrayUnion(like_user_id)});\r\n}\r\n\r\n\r\nexport {save_image}"]},"metadata":{},"sourceType":"module"}