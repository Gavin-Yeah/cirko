{"ast":null,"code":"import _defineProperty from\"/Users/jiadaye/workspace/cirko/node_modules/@babel/runtime/helpers/esm/defineProperty\";import _classCallCheck from\"/Users/jiadaye/workspace/cirko/node_modules/@babel/runtime/helpers/esm/classCallCheck\";function ownKeys(object,enumerableOnly){var keys=Object.keys(object);if(Object.getOwnPropertySymbols){var symbols=Object.getOwnPropertySymbols(object);if(enumerableOnly)symbols=symbols.filter(function(sym){return Object.getOwnPropertyDescriptor(object,sym).enumerable;});keys.push.apply(keys,symbols);}return keys;}function _objectSpread(target){for(var i=1;i<arguments.length;i++){var source=arguments[i]!=null?arguments[i]:{};if(i%2){ownKeys(source,true).forEach(function(key){_defineProperty(target,key,source[key]);});}else if(Object.getOwnPropertyDescriptors){Object.defineProperties(target,Object.getOwnPropertyDescriptors(source));}else{ownKeys(source).forEach(function(key){Object.defineProperty(target,key,Object.getOwnPropertyDescriptor(source,key));});}}return target;}import app from'firebase/app';import'firebase/auth';import'firebase/firestore';import'firebase/storage';import'firebase/functions';var config={apiKey:process.env.REACT_APP_API_KEY,authDomain:process.env.REACT_APP_AUTH_DOMAIN,databaseURL:process.env.REACT_APP_DATABASE_URL,projectId:process.env.REACT_APP_PROJECT_ID,storageBucket:process.env.REACT_APP_STORAGE_BUCKET,messagingSenderId:process.env.REACT_APP_MESSAGING_SENDER_ID,appId:process.env.REACT_APP_APP_ID,measurementId:process.env.REACT_APP_MEASUREMENT_ID};var Firebase=function Firebase(){var _this=this;_classCallCheck(this,Firebase);this.doCreateUserWithEmailAndPassword=function(email,password){return _this.auth.createUserWithEmailAndPassword(email,password);};this.doSignInWithEmailAndPassword=function(email,password){return _this.auth.signInWithEmailAndPassword(email,password);};this.doSignInWithGoogle=function(){return _this.auth.signInWithPopup(_this.googleProvider);};this.doSignOut=function(){return _this.auth.signOut();};this.doPasswordReset=function(email){return _this.auth.sendPasswordResetEmail(email);};this.doPasswordUpdate=function(password){return _this.auth.currentUser.updatePassword(password);};this.onAuthUserListener=function(next,fallback){return _this.auth.onAuthStateChanged(function(authUser){if(authUser){_this.user(authUser.uid).get().then(function(snapshot){var dbUser=snapshot.data();// default empty roles\n// merge auth and db user\nauthUser=_objectSpread({uid:authUser.uid,email:authUser.email},dbUser);next(authUser);});}else{fallback();}});};this.user=function(uid){return _this.db.doc(\"users/\".concat(uid));};this.users=function(){return _this.db.collection('users');};app.initializeApp(config);this.auth=app.auth();this.db=app.firestore();this.googleProvider=new app.auth.GoogleAuthProvider();this.storage=app.storage();this.fieldValue=app.firestore.FieldValue;this.functions=app.functions();}// *** Auth API ***\n;export default Firebase;","map":{"version":3,"sources":["/Users/jiadaye/workspace/cirko/src/components/Firebase/firebase.js"],"names":["app","config","apiKey","process","env","REACT_APP_API_KEY","authDomain","REACT_APP_AUTH_DOMAIN","databaseURL","REACT_APP_DATABASE_URL","projectId","REACT_APP_PROJECT_ID","storageBucket","REACT_APP_STORAGE_BUCKET","messagingSenderId","REACT_APP_MESSAGING_SENDER_ID","appId","REACT_APP_APP_ID","measurementId","REACT_APP_MEASUREMENT_ID","Firebase","doCreateUserWithEmailAndPassword","email","password","auth","createUserWithEmailAndPassword","doSignInWithEmailAndPassword","signInWithEmailAndPassword","doSignInWithGoogle","signInWithPopup","googleProvider","doSignOut","signOut","doPasswordReset","sendPasswordResetEmail","doPasswordUpdate","currentUser","updatePassword","onAuthUserListener","next","fallback","onAuthStateChanged","authUser","user","uid","get","then","snapshot","dbUser","data","db","doc","users","collection","initializeApp","firestore","GoogleAuthProvider","storage","fieldValue","FieldValue","functions"],"mappings":"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","sourcesContent":["import app from 'firebase/app';\nimport 'firebase/auth';\nimport 'firebase/firestore';\nimport 'firebase/storage';\nimport 'firebase/functions'\n\n\nconst config = {\n\n    apiKey: process.env.REACT_APP_API_KEY,\n    authDomain: process.env.REACT_APP_AUTH_DOMAIN,\n    databaseURL: process.env.REACT_APP_DATABASE_URL,\n    projectId: process.env.REACT_APP_PROJECT_ID,\n    storageBucket: process.env.REACT_APP_STORAGE_BUCKET,\n    messagingSenderId: process.env.REACT_APP_MESSAGING_SENDER_ID,\n    appId: process.env.REACT_APP_APP_ID,\n    measurementId:process.env.REACT_APP_MEASUREMENT_ID,\n\n\n};\nclass Firebase {\n    constructor() {\n        app.initializeApp(config);\n        this.auth = app.auth();\n        this.db = app.firestore();\n        this.googleProvider = new app.auth.GoogleAuthProvider();\n        this.storage = app.storage();\n        this.fieldValue = app.firestore.FieldValue;\n        this.functions = app.functions();\n    }\n\n    // *** Auth API ***\n    doCreateUserWithEmailAndPassword = (email, password) =>\n        this.auth.createUserWithEmailAndPassword(email, password);\n    doSignInWithEmailAndPassword = (email, password) =>\n        this.auth.signInWithEmailAndPassword(email, password);\n\n    doSignInWithGoogle = () =>\n        this.auth.signInWithPopup(this.googleProvider);\n\n\n\n    doSignOut = () => this.auth.signOut();\n    doPasswordReset = email => this.auth.sendPasswordResetEmail(email);\n    doPasswordUpdate = password =>\n        this.auth.currentUser.updatePassword(password);\n\n\n    // *** Merge Auth and DB User API *** //\n    onAuthUserListener = (next, fallback) =>\n        this.auth.onAuthStateChanged(authUser => {\n            if (authUser) {\n                this.user(authUser.uid)\n                    .get()\n                    .then(snapshot => {\n                        const dbUser = snapshot.data();\n\n                        // default empty roles\n\n                        // merge auth and db user\n                        authUser = {\n                            uid: authUser.uid,\n                            email: authUser.email,\n                            ...dbUser,\n                        };\n                        next(authUser);\n                    });\n            } else {\n                fallback();\n            }\n        });\n\n\n    // *** User API ***\n    user = uid => this.db.doc(`users/${uid}`);\n    users = () => this.db.collection('users');\n\n\n}\nexport default Firebase;\n"]},"metadata":{},"sourceType":"module"}