{"ast":null,"code":"import { withFirebase } from '../Firebase'; // Your web app's Firebase configuration\n// Initialize Firebase\n//when user select a picture as a (head-pic)? save it to the storage\n\nfunction updateImage(firebase, user_ID, Image, callback) {\n  //get the storage reference\n  var storage = firebase.storage;\n  var storageRef = storage.ref('images/' + user_ID + '.jpg'); //store image to storage\n\n  storageRef.put(Image).then(function (snapshot) {\n    storageRef.getDownloadURL().then(url => {\n      firebase.auth.currentUser.updateProfile({\n        photoURL: url\n      }).then(() => {\n        console.log(\"succeed\");\n        callback();\n      }).catch(err => {\n        console.log(\"err\", err);\n      });\n    });\n  });\n} //when user wants to save his profile\n//if no picture selected before? should we just create a no pic?\n\n\nfunction updateUserName(firebase, user_ID, user_name\n/*...*/\n, callback) {\n  var db = firebase.db;\n  console.log(db.collection(\"users\").doc(user_ID));\n  db.collection(\"users\").doc(user_ID).set({\n    username: user_name\n    /*...*/\n\n  }).then(function (docRef) {\n    firebase.auth.currentUser.updateProfile({\n      displayName: user_name\n    }).then(() => {\n      callback();\n    }).catch(err => {\n      console.log(\"err\", err);\n    });\n  }).catch(function (error) {\n    console.error(\"Error writing user profile to db\", error);\n  });\n} //follower wants to follow followed...Or any better name?\n\n\nfunction follow(firebase, follower_id, followed_id) {\n  //get the database reference\n  var db = firebase.firestore();\n  db.collection(\"users\").doc(follower_id).update({\n    following: firebase.firestore.FieldValue.arrayUnion(followed_id)\n  });\n  db.collection(\"users\").doc(followed_id).update({\n    followers: firebase.firestore.FieldValue.arrayUnion(follower_id)\n  });\n} //when user share a post and then you will need to save it to the database\n// passing a user obj? and a post object will be a better option.\n// post_id = user_id + \"_post_\" + posts_num.toString();!!! important\n\n\nfunction savePostToDB(firebase, user_id, username, posts_num, content, location, pictures, callback) {\n  //get the database reference\n  var db = firebase.db; //generate post id\n\n  var post_id = user_id + \"_post_\" + posts_num;\n  posts_num = posts_num + 1; //generate time\n\n  var myDate = new Date();\n  var time = myDate.toLocaleString(); //store post into post db\n\n  db.collection(\"posts\").doc(post_id).set({\n    userAvatar: this.props.firebase.auth.currentUser.photoURL,\n    postId: post_id,\n    userID: user_id,\n    username: username,\n    content: content,\n    location: location,\n    pictures_url: [],\n    comments: [],\n    likes: [],\n    time: time\n  }); //store images and update the url of pictures in database\n\n  save_multiple_image(firebase, post_id, pictures); //update user data base\n\n  db.collection(\"users\").doc(user_id).update({\n    posts: firebase.fieldValue.arrayUnion(post_id),\n    posts_num: posts_num\n  }).then(callback());\n} //when user select a picture as a (head-pic)? save it to the storage\n\n\nfunction save_multiple_image(firebase, post_id, Images) {\n  //get the storage reference\n  var storage = firebase.storage;\n  var db = firebase.db;\n\n  for (var i = 0; i < Images.length; i++) {\n    var storageRef = storage.ref('images/' + post_id + '_' + i.toString() + '.jpg'); //store image to storage\n\n    storageRef.put(Images[i].file).then(function (snapshot) {\n      snapshot.ref.getDownloadURL().then(function (url) {\n        //update the url in DB\n        db.collection(\"posts\").doc(post_id).update({\n          pictures_url: firebase.fieldValue.arrayUnion(url)\n        });\n      }).catch(function (error) {\n        console.error(\"Error writing get URL for the image\", error);\n      });\n    });\n  }\n} //comments\n\n\nfunction comments(firebase, comment_user_id, content, post_id) {\n  //get the database reference\n  var db = firebase.firestore(); //create a comment object\n\n  var comment = {\n    content: content,\n    comment_user_id: comment_user_id,\n    post_id: post_id\n  }; //update database\n\n  db.collection(\"posts\").doc(post_id).update({\n    comments: firebase.firestore.FieldValue.arrayUnion(comment)\n  });\n} //\n//like\n\n\nfunction likes(firebase, like_user_id, post_id) {\n  //get the database reference\n  var db = firebase.firestore(); //update database\n\n  db.collection(\"posts\").doc(post_id).update({\n    likes: firebase.firestore.FieldValue.arrayUnion(like_user_id)\n  });\n}\n\nfunction get_user_profile(firebase, user_id, callback) {\n  //get db reference\n  var db = firebase.db;\n  var docRef = db.collection(\"users\").doc(user_id);\n  docRef.get().then(function (doc) {\n    if (doc.exists) {\n      callback(doc.data());\n    } else {\n      // doc.data() will be undefined in this case\n      console.log(\"No such document!\");\n    }\n  }).catch(function (error) {\n    console.log(\"Error getting document:\", error);\n  });\n}\n\nexport { updateImage, updateUserName, comments, follow, savePostToDB, get_user_profile };","map":{"version":3,"sources":["/Users/jiadaye/workspace/cirko/src/components/Firebase/upload.js"],"names":["withFirebase","updateImage","firebase","user_ID","Image","callback","storage","storageRef","ref","put","then","snapshot","getDownloadURL","url","auth","currentUser","updateProfile","photoURL","console","log","catch","err","updateUserName","user_name","db","collection","doc","set","username","docRef","displayName","error","follow","follower_id","followed_id","firestore","update","following","FieldValue","arrayUnion","followers","savePostToDB","user_id","posts_num","content","location","pictures","post_id","myDate","Date","time","toLocaleString","userAvatar","props","postId","userID","pictures_url","comments","likes","save_multiple_image","posts","fieldValue","Images","i","length","toString","file","comment_user_id","comment","like_user_id","get_user_profile","get","exists","data"],"mappings":"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","sourcesContent":["import { withFirebase } from '../Firebase';\n// Your web app's Firebase configuration\n\n// Initialize Firebase\n\n\n//when user select a picture as a (head-pic)? save it to the storage\nfunction updateImage(firebase, user_ID, Image, callback) {\n    //get the storage reference\n    var storage = firebase.storage;\n    var storageRef = storage.ref('images/' + user_ID + '.jpg');\n    //store image to storage\n    storageRef.put(Image).then(function (snapshot) {\n        storageRef.getDownloadURL().then((url) => {\n            firebase.auth.currentUser.updateProfile({\n                photoURL: url\n            }).then(() => {\n                console.log(\"succeed\")\n                callback()\n            }).catch((err) => {\n                console.log(\"err\", err)\n            })\n        })\n    });\n\n}\n\n//when user wants to save his profile\n//if no picture selected before? should we just create a no pic?\nfunction updateUserName(firebase, user_ID, user_name/*...*/, callback) {\n    var db = firebase.db;\n    console.log( db.collection(\"users\").doc(user_ID));\n    db.collection(\"users\").doc(user_ID).set({\n\n        username: user_name,\n        /*...*/\n    })\n        .then(function (docRef) {\n            firebase.auth.currentUser.updateProfile({\n                displayName: user_name,\n            }).then(() => {\n                callback()\n            }).catch((err) => {\n                console.log(\"err\", err)\n            })\n        })\n        .catch(function (error) {\n            console.error(\"Error writing user profile to db\", error);\n        });\n\n\n}\n\n//follower wants to follow followed...Or any better name?\nfunction follow(firebase, follower_id, followed_id) {\n    //get the database reference\n    var db = firebase.firestore();\n    db.collection(\"users\").doc(follower_id).update({\n        following: firebase.firestore.FieldValue.arrayUnion(followed_id)\n    })\n    db.collection(\"users\").doc(followed_id).update({\n        followers: firebase.firestore.FieldValue.arrayUnion(follower_id)\n    })\n}\n\n//when user share a post and then you will need to save it to the database\n// passing a user obj? and a post object will be a better option.\n// post_id = user_id + \"_post_\" + posts_num.toString();!!! important\nfunction savePostToDB(firebase, user_id, username, posts_num, content, location, pictures, callback) {\n    //get the database reference\n    var db = firebase.db;\n    //generate post id\n    var post_id = user_id + \"_post_\" + posts_num;\n    posts_num = posts_num + 1;\n    //generate time\n    var myDate = new Date();\n    var time = myDate.toLocaleString();\n\n    //store post into post db\n    db.collection(\"posts\").doc(post_id).set({\n        userAvatar:this.props.firebase.auth.currentUser.photoURL,\n        postId:post_id,\n        userID: user_id,\n        username:username,\n        content: content,\n        location: location,\n        pictures_url: [],\n        comments: [],\n        likes: [],\n        time: time\n    });\n\n    //store images and update the url of pictures in database\n    save_multiple_image(firebase, post_id, pictures);\n\n    //update user data base\n    db.collection(\"users\").doc(user_id).update({\n        posts: firebase.fieldValue.arrayUnion(post_id),\n        posts_num: posts_num\n    }).then(\n        callback())\n}\n\n\n//when user select a picture as a (head-pic)? save it to the storage\nfunction save_multiple_image(firebase, post_id, Images) {\n    //get the storage reference\n    var storage = firebase.storage;\n    var db = firebase.db;\n    for (var i = 0; i < Images.length; i++) {\n        var storageRef = storage.ref('images/' + post_id + '_' + i.toString() + '.jpg');\n        //store image to storage\n        storageRef.put(Images[i].file).then(function (snapshot) {\n            snapshot.ref.getDownloadURL().then(function (url) {\n                //update the url in DB\n                db.collection(\"posts\").doc(post_id).update({\n                    pictures_url: firebase.fieldValue.arrayUnion(url)\n                })\n            })\n                .catch(function (error) {\n                    console.error(\"Error writing get URL for the image\", error);\n                });\n        });\n    }\n}\n\n\n//comments\nfunction comments(firebase, comment_user_id, content, post_id) {\n    //get the database reference\n    var db = firebase.firestore();\n    //create a comment object\n    var comment = {content: content, comment_user_id: comment_user_id, post_id: post_id};\n    //update database\n    db.collection(\"posts\").doc(post_id).update({comments: firebase.firestore.FieldValue.arrayUnion(comment)});\n}\n\n//\n\n//like\nfunction likes(firebase, like_user_id, post_id) {\n    //get the database reference\n    var db = firebase.firestore();\n    //update database\n    db.collection(\"posts\").doc(post_id).update({likes: firebase.firestore.FieldValue.arrayUnion(like_user_id)});\n}\n\nfunction get_user_profile(firebase,user_id, callback) {\n    //get db reference\n    var db = firebase.db;\n    var docRef = db.collection(\"users\").doc(user_id);\n\n    docRef.get().then(function(doc) {\n        if (doc.exists) {\n\n            callback(doc.data());\n        } else {\n            // doc.data() will be undefined in this case\n            console.log(\"No such document!\");\n        }\n    }).catch(function(error) {\n        console.log(\"Error getting document:\", error);\n    });\n\n}\nexport { updateImage, updateUserName, comments, follow, savePostToDB,get_user_profile}"]},"metadata":{},"sourceType":"module"}