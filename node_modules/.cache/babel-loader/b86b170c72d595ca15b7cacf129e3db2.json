{"ast":null,"code":"var get_location=function get_location(callback){if(navigator.geolocation){navigator.geolocation.getCurrentPosition(function(position){var pos={lat:position.coords.latitude,lng:position.coords.longitude};callback(pos);return pos;});}else{// Browser doesn't support Geolocation\nconsole.log(\"error: Browser doesn't support Geolocation\");}};/* pass the location and the result is the formatted address */ // const geocodeLatLng =(location, callback) =>{\n//      var geocoder = new google.maps.Geocoder;\n//      var latlng = {lat: location.lat, lng: location.lng};\n//      geocoder.geocode({'location': latlng}, function(results, status) {\n//          if (status === 'OK') {\n//              if (results[0]) {\n//                  callback(results[0].formatted_address);\n//              } else {\n//                  window.alert('No results found');\n//              }\n//          } else {\n//              window.alert('Geocoder failed due to: ' + status);\n//          }\n//      });\n//  }\n/* the result will be the list of posts which meet the requirement */ // const fliter =(list_posts, distance, user_location, callback)=>{\n//      let mydestinations = [];\n//      console.log(list_posts);\n//      for(let i = 0; i<list_posts.length; i++) {\n//          mydestinations.push(new google.maps.LatLng(list_posts[i].location.lat, list_posts[i].location.lng));\n//      }\n//      let ori = new google.maps.LatLng(user_location.lat, user_location.lng);\n//      var service = new google.maps.DistanceMatrixService();\n//      let return_list = [];\n//      service.getDistanceMatrix(\n//          {\n//              origins: [ori],\n//              destinations: mydestinations,\n//              travelMode: 'WALKING'\n//          }, (response, status)=>{return_list = fliter_help(response, status, distance, list_posts)\n//              callback(return_list);\n//          });\n//  }\n// const fliter_help =(response, status, dis, list_posts) =>{\n//      let distances = [];\n//      let return_list = [];\n//      if (status == 'OK') {\n//          var origins = response.originAddresses;\n//\n//          for (var i = 0; i < origins.length; i++) {\n//              var results = response.rows[i].elements;\n//              for (var j = 0; j < results.length; j++) {\n//                  var element = results[j];\n//                  var distance = element.distance.value;\n//                  distances.push(distance);\n//              }\n//          }\n//          for(let i = 0; i < distances.length; i++) {\n//              if(distances[i] < dis) {\n//                  return_list.push(list_posts[i]);\n//              }\n//          }\n//          return return_list;\n//      }\n//      return return_list;\n//  }\nexport{get_location};","map":{"version":3,"sources":["/Users/jiadaye/workspace/cirko/src/components/utils/getLocation.js"],"names":["get_location","callback","navigator","geolocation","getCurrentPosition","position","pos","lat","coords","latitude","lng","longitude","console","log"],"mappings":"AACA,GAAMA,CAAAA,YAAY,CAAE,QAAdA,CAAAA,YAAc,CAACC,QAAD,CAAa,CAC5B,GAAIC,SAAS,CAACC,WAAd,CAA2B,CACvBD,SAAS,CAACC,WAAV,CAAsBC,kBAAtB,CAAyC,SAAUC,QAAV,CAAoB,CACzD,GAAIC,CAAAA,GAAG,CAAG,CACNC,GAAG,CAAEF,QAAQ,CAACG,MAAT,CAAgBC,QADf,CAENC,GAAG,CAAEL,QAAQ,CAACG,MAAT,CAAgBG,SAFf,CAAV,CAKAV,QAAQ,CAACK,GAAD,CAAR,CACA,MAAOA,CAAAA,GAAP,CACH,CARD,EASH,CAVD,IAUO,CACH;AACAM,OAAO,CAACC,GAAR,CAAY,4CAAZ,EAEH,CACJ,CAhBF,CAkBC,+D,CACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEC,qE,CACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAQb,YAAR","sourcesContent":["\nconst get_location =(callback)=> {\n     if (navigator.geolocation) {\n         navigator.geolocation.getCurrentPosition(function (position) {\n             var pos = {\n                 lat: position.coords.latitude,\n                 lng: position.coords.longitude\n             };\n\n             callback(pos);\n             return pos;\n         });\n     } else {\n         // Browser doesn't support Geolocation\n         console.log(\"error: Browser doesn't support Geolocation\");\n\n     }\n }\n\n /* pass the location and the result is the formatted address */\n// const geocodeLatLng =(location, callback) =>{\n//      var geocoder = new google.maps.Geocoder;\n//      var latlng = {lat: location.lat, lng: location.lng};\n//      geocoder.geocode({'location': latlng}, function(results, status) {\n//          if (status === 'OK') {\n//              if (results[0]) {\n//                  callback(results[0].formatted_address);\n//              } else {\n//                  window.alert('No results found');\n//              }\n//          } else {\n//              window.alert('Geocoder failed due to: ' + status);\n//          }\n//      });\n//  }\n\n /* the result will be the list of posts which meet the requirement */\n// const fliter =(list_posts, distance, user_location, callback)=>{\n//      let mydestinations = [];\n//      console.log(list_posts);\n//      for(let i = 0; i<list_posts.length; i++) {\n//          mydestinations.push(new google.maps.LatLng(list_posts[i].location.lat, list_posts[i].location.lng));\n//      }\n//      let ori = new google.maps.LatLng(user_location.lat, user_location.lng);\n//      var service = new google.maps.DistanceMatrixService();\n//      let return_list = [];\n//      service.getDistanceMatrix(\n//          {\n//              origins: [ori],\n//              destinations: mydestinations,\n//              travelMode: 'WALKING'\n//          }, (response, status)=>{return_list = fliter_help(response, status, distance, list_posts)\n//              callback(return_list);\n//          });\n//  }\n\n// const fliter_help =(response, status, dis, list_posts) =>{\n//      let distances = [];\n//      let return_list = [];\n//      if (status == 'OK') {\n//          var origins = response.originAddresses;\n//\n//          for (var i = 0; i < origins.length; i++) {\n//              var results = response.rows[i].elements;\n//              for (var j = 0; j < results.length; j++) {\n//                  var element = results[j];\n//                  var distance = element.distance.value;\n//                  distances.push(distance);\n//              }\n//          }\n//          for(let i = 0; i < distances.length; i++) {\n//              if(distances[i] < dis) {\n//                  return_list.push(list_posts[i]);\n//              }\n//          }\n//          return return_list;\n//      }\n//      return return_list;\n//  }\nexport {get_location}"]},"metadata":{},"sourceType":"module"}