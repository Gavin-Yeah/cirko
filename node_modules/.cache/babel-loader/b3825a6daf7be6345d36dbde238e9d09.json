{"ast":null,"code":"import { withFirebase } from '../Firebase'; // Your web app's Firebase configuration\n// Initialize Firebase\n//when user select a picture as a (head-pic)? save it to the storage\n\nfunction updateImage(firebase, user_ID, Image) {\n  return new Promise((resolve, reject) => {\n    //get the storage reference\n    var storage = firebase.storage;\n    var db = firebase.db;\n    var storageRef = storage.ref('images/' + user_ID + '.jpg'); //store image to storage\n\n    storageRef.put(Image).then(function (snapshot) {\n      storageRef.getDownloadURL().then(url => {\n        db.collection(\"users\").doc(user_ID).update({\n          avatarUrl: url\n        }).then(() => {\n          firebase.auth.currentUser.updateProfile({\n            photoURL: url\n          }).then(() => {\n            resolve(\"succeed\");\n          }).catch(err => {\n            resolve(err.toString());\n          });\n        });\n      });\n    });\n  });\n} //when user wants to save his profile\n//if no picture selected before? should we just create a no pic?\n\n\nfunction updateUserName(firebase, user_ID, user_name\n/*...*/\n) {\n  return new Promise((resolve, reject) => {\n    var db = firebase.db;\n    console.log(db.collection(\"users\").doc(user_ID));\n    db.collection(\"users\").doc(user_ID).update({\n      username: user_name\n    }).then(function (docRef) {\n      firebase.auth.currentUser.updateProfile({\n        displayName: user_name\n      }).then(() => {\n        resolve(\"success\");\n      }).catch(err => {\n        reject(err.toString());\n      });\n    }).catch(function (error) {\n      console.error(\"Error writing user profile to db\", error);\n    });\n  });\n} //follower wants to follow followed...Or any better name?\n\n\nfunction follow(firebase, follower_id, followed_id) {\n  //get the database reference\n  var db = firebase.firestore();\n  db.collection(\"users\").doc(follower_id).update({\n    following: firebase.firestore.FieldValue.arrayUnion(followed_id)\n  });\n  db.collection(\"users\").doc(followed_id).update({\n    followers: firebase.firestore.FieldValue.arrayUnion(follower_id)\n  });\n} //when user share a post and then you will need to save it to the database\n// passing a user obj? and a post object will be a better option.\n// post_id = user_id + \"_post_\" + posts_num.toString();!!! important\n\n\nfunction savePostToDB(firebase, user_id, username, posts_num, content, pictures, location, place, callback) {\n  //get the database reference\n  var db = firebase.db; //generate post id\n\n  var post_id = user_id + \"_post_\" + posts_num;\n  posts_num = posts_num * 1 + 1; //generate time\n\n  var myDate = new Date();\n  var time = myDate.toString(); //store post into post db\n\n  db.collection(\"posts\").doc(post_id).set({\n    userAvatar: firebase.auth.currentUser.photoURL,\n    postId: post_id,\n    userID: user_id,\n    username: username,\n    content: content,\n    location: location,\n    pictures_url: [],\n    comments: [],\n    place: place,\n    likes: [],\n    time: time\n  }); //store images and update the url of pictures in database\n\n  save_multiple_image(firebase, post_id, pictures); //update user data base\n\n  db.collection(\"users\").doc(user_id).update({\n    posts: firebase.fieldValue.arrayUnion(post_id),\n    posts_num: posts_num\n  }).then(callback());\n} //when user select a picture as a (head-pic)? save it to the storage\n\n\nfunction save_multiple_image(firebase, post_id, Images) {\n  //get the storage reference\n  var storage = firebase.storage;\n  var db = firebase.db;\n\n  for (var i = 0; i < Images.length; i++) {\n    var storageRef = storage.ref('images/' + post_id + '_' + i.toString() + '.jpg'); //store image to storage\n\n    storageRef.put(Images[i].file).then(function (snapshot) {\n      snapshot.ref.getDownloadURL().then(function (url) {\n        //update the url in DB\n        db.collection(\"posts\").doc(post_id).update({\n          pictures_url: firebase.fieldValue.arrayUnion(url)\n        });\n      }).catch(function (error) {\n        console.error(\"Error writing get URL for the image\", error);\n      });\n    });\n  }\n} //comments\n\n\nfunction comments(firebase, comment_user_id, comment_user_name, comment_user_avatar, content, post_id, callback) {\n  //get the database reference\n  var db = firebase.db; //create a comment object\n\n  var comment = {\n    content: content,\n    comment_user_id: comment_user_id,\n    comment_user_name,\n    comment_user_avatar,\n    post_id: post_id\n  }; //update database\n  // console.log( firebase.fieldValue.arrayUnion(comment))\n\n  db.collection(\"posts\").doc(post_id).update({\n    comments: firebase.fieldValue.arrayUnion(comment)\n  }).then(callback);\n} //\n//like\n\n\nfunction likes(firebase, like_user_id, post_id) {\n  return new Promise((resolve, reject) => {\n    //get the database reference\n    var db = firebase.db; //update database\n\n    db.collection(\"posts\").doc(post_id).update({\n      likes: firebase.fieldValue.arrayUnion(like_user_id)\n    }).then(() => {\n      resolve(\"sucecss\");\n    }).catch(err => {\n      reject(err.toString());\n    });\n    db.collection(\"users\").doc(like_user_id).update({\n      likes: firebase.fieldValue.arrayUnion(post_id)\n    }).then(() => {\n      resolve(\"sucecss\");\n    }).catch(err => {\n      reject(err.toString());\n    });\n  });\n}\n\nfunction get_user_profile(firebase, user_id, callback) {\n  //get db reference\n  var db = firebase.db;\n  var docRef = db.collection(\"users\").doc(user_id);\n  docRef.get().then(function (doc) {\n    if (doc.exists) {\n      callback(doc.data());\n    } else {\n      // doc.data() will be undefined in this case\n      console.log(\"No such document!\");\n    }\n  }).catch(function (error) {\n    console.log(\"Error getting document:\", error);\n  });\n}\n\nexport { updateImage, updateUserName, comments, follow, savePostToDB, get_user_profile, likes };","map":{"version":3,"sources":["/Users/jiadaye/workspace/cirko/src/components/Firebase/upload.js"],"names":["withFirebase","updateImage","firebase","user_ID","Image","Promise","resolve","reject","storage","db","storageRef","ref","put","then","snapshot","getDownloadURL","url","collection","doc","update","avatarUrl","auth","currentUser","updateProfile","photoURL","catch","err","toString","updateUserName","user_name","console","log","username","docRef","displayName","error","follow","follower_id","followed_id","firestore","following","FieldValue","arrayUnion","followers","savePostToDB","user_id","posts_num","content","pictures","location","place","callback","post_id","myDate","Date","time","set","userAvatar","postId","userID","pictures_url","comments","likes","save_multiple_image","posts","fieldValue","Images","i","length","file","comment_user_id","comment_user_name","comment_user_avatar","comment","like_user_id","get_user_profile","get","exists","data"],"mappings":"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","sourcesContent":["import { withFirebase } from '../Firebase';\n// Your web app's Firebase configuration\n\n// Initialize Firebase\n\n\n//when user select a picture as a (head-pic)? save it to the storage\nfunction updateImage(firebase, user_ID, Image) {\n    return new Promise((resolve, reject)=>{\n        //get the storage reference\n        var storage = firebase.storage;\n        var db= firebase.db;\n        var storageRef = storage.ref('images/' + user_ID + '.jpg');\n        //store image to storage\n        storageRef.put(Image).then(function (snapshot) {\n            storageRef.getDownloadURL().then((url) => {\n                db.collection(\"users\").doc(user_ID).update({\n                    avatarUrl:url\n                }).then(()=>{\n                    firebase.auth.currentUser.updateProfile({\n                        photoURL: url\n                    }).then(() => {\n                        resolve(\"succeed\");\n\n                    }).catch((err) => {\n                       resolve(err.toString())\n                    })\n                })\n            })\n        });\n    });\n\n\n}\n\n//when user wants to save his profile\n//if no picture selected before? should we just create a no pic?\n function updateUserName(firebase, user_ID, user_name/*...*/) {\n   return new Promise((resolve, reject)=>{\n       var db = firebase.db;\n       console.log( db.collection(\"users\").doc(user_ID));\n       db.collection(\"users\").doc(user_ID).update({\n           username: user_name,\n       })\n           .then(function (docRef) {\n               firebase.auth.currentUser.updateProfile({\n                   displayName: user_name\n               }).then(() => {\n                    resolve(\"success\")\n               }).catch((err) => {\n                   reject(err.toString())\n\n               })\n           })\n           .catch(function (error) {\n               console.error(\"Error writing user profile to db\", error);\n           });\n\n   })\n\n\n}\n\n//follower wants to follow followed...Or any better name?\nfunction follow(firebase, follower_id, followed_id) {\n    //get the database reference\n    var db = firebase.firestore();\n    db.collection(\"users\").doc(follower_id).update({\n        following: firebase.firestore.FieldValue.arrayUnion(followed_id)\n    })\n    db.collection(\"users\").doc(followed_id).update({\n        followers: firebase.firestore.FieldValue.arrayUnion(follower_id)\n    })\n}\n\n//when user share a post and then you will need to save it to the database\n// passing a user obj? and a post object will be a better option.\n// post_id = user_id + \"_post_\" + posts_num.toString();!!! important\nfunction savePostToDB(firebase, user_id, username, posts_num, content,  pictures,location, place, callback) {\n    //get the database reference\n    var db = firebase.db;\n    //generate post id\n    var post_id = user_id + \"_post_\" + posts_num;\n    posts_num = posts_num*1 + 1;\n    //generate time\n    var myDate = new Date();\n    var time = myDate.toString();\n\n    //store post into post db\n    db.collection(\"posts\").doc(post_id).set({\n        userAvatar:firebase.auth.currentUser.photoURL,\n        postId:post_id,\n        userID: user_id,\n        username:username,\n        content: content,\n        location: location,\n        pictures_url: [],\n        comments: [],\n\n        place: place,\n        likes: [],\n        time: time\n    });\n\n    //store images and update the url of pictures in database\n    save_multiple_image(firebase, post_id, pictures);\n\n    //update user data base\n    db.collection(\"users\").doc(user_id).update({\n        posts: firebase.fieldValue.arrayUnion(post_id),\n        posts_num: posts_num\n    }).then(\n        callback()\n    )\n}\n\n\n//when user select a picture as a (head-pic)? save it to the storage\nfunction save_multiple_image(firebase, post_id, Images) {\n    //get the storage reference\n    var storage = firebase.storage;\n    var db = firebase.db;\n    for (var i = 0; i < Images.length; i++) {\n        var storageRef = storage.ref('images/' + post_id + '_' + i.toString() + '.jpg');\n        //store image to storage\n        storageRef.put(Images[i].file).then(function (snapshot) {\n            snapshot.ref.getDownloadURL().then(function (url) {\n                //update the url in DB\n                db.collection(\"posts\").doc(post_id).update({\n                    pictures_url: firebase.fieldValue.arrayUnion(url)\n                })\n            })\n                .catch(function (error) {\n                    console.error(\"Error writing get URL for the image\", error);\n                });\n        });\n    }\n}\n\n\n//comments\nfunction comments(firebase, comment_user_id, comment_user_name,comment_user_avatar,content, post_id,callback) {\n    //get the database reference\n    var db = firebase.db;\n    //create a comment object\n    var comment = {content: content, comment_user_id: comment_user_id,comment_user_name,comment_user_avatar, post_id: post_id};\n    //update database\n    // console.log( firebase.fieldValue.arrayUnion(comment))\n    db.collection(\"posts\").doc(post_id).update({comments: firebase.fieldValue.arrayUnion(comment)}).then(\n        callback\n    );\n}\n\n//\n\n//like\nfunction likes(firebase, like_user_id, post_id) {\n    return new Promise((resolve,reject)=>{\n        //get the database reference\n        var db = firebase.db;\n        //update database\n        db.collection(\"posts\").doc(post_id).update({likes: firebase.fieldValue.arrayUnion(like_user_id)}).then(()=>{resolve(\"sucecss\")}).catch(err=>{\n            reject(err.toString())\n        });\n        db.collection(\"users\").doc(like_user_id).update({likes: firebase.fieldValue.arrayUnion(post_id)}).then(()=>{resolve(\"sucecss\")}).catch((err)=>{\n            reject(err.toString())\n        });\n    })\n\n}\n\nfunction get_user_profile(firebase,user_id, callback) {\n    //get db reference\n    var db = firebase.db;\n    var docRef = db.collection(\"users\").doc(user_id);\n\n    docRef.get().then(function(doc) {\n        if (doc.exists) {\n\n            callback(doc.data());\n        } else {\n            // doc.data() will be undefined in this case\n            console.log(\"No such document!\");\n        }\n    }).catch(function(error) {\n        console.log(\"Error getting document:\", error);\n    });\n\n}\nexport { updateImage, updateUserName, comments, follow, savePostToDB,get_user_profile,likes}"]},"metadata":{},"sourceType":"module"}