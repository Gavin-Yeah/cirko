{"ast":null,"code":"import _defineProperty from \"/Users/jiadaye/workspace/cirko/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nvar _jsxFileName = \"/Users/jiadaye/workspace/cirko/src/components/Admin/index.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React, { Component } from 'react';\nimport { withFirebase } from '../Firebase';\nimport { compose } from 'recompose';\nimport { withAuthorization } from '../Session';\nimport * as ROLES from '../../constants/roles';\n\nclass AdminPage extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      loading: false,\n      users: []\n    };\n  }\n\n  componentDidMount() {\n    this.setState({\n      loading: true\n    });\n    this.unsubscribe = this.props.firebase.users().onSnapshot(snapshot => {\n      let users = [];\n      snapshot.forEach(doc => users.push(_objectSpread({}, doc.data(), {\n        uid: doc.id\n      })));\n      this.setState({\n        users,\n        loading: false\n      });\n    });\n  }\n\n  componentWillUnmount() {\n    this.props.firebase.users().off();\n  }\n\n  render() {\n    const _this$state = this.state,\n          users = _this$state.users,\n          loading = _this$state.loading;\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 38\n      },\n      __self: this\n    }, React.createElement(\"h1\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 39\n      },\n      __self: this\n    }, \"Admin\"), React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 40\n      },\n      __self: this\n    }, \"The Admin Page is accessible by every signed in admin user.\"), loading && React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 44\n      },\n      __self: this\n    }, \"Loading ...\"), React.createElement(UserList, {\n      users: users,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 45\n      },\n      __self: this\n    }));\n  }\n\n}\n\nconst UserList = ({\n  users\n}) => React.createElement(\"ul\", {\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 51\n  },\n  __self: this\n}, users.map(user => React.createElement(\"li\", {\n  key: user.uid,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 53\n  },\n  __self: this\n}, React.createElement(\"span\", {\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 54\n  },\n  __self: this\n}, React.createElement(\"strong\", {\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 55\n  },\n  __self: this\n}, \"ID:\"), \" \", user.uid), React.createElement(\"span\", {\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 57\n  },\n  __self: this\n}, React.createElement(\"strong\", {\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 58\n  },\n  __self: this\n}, \"E-Mail:\"), \" \", user.email), React.createElement(\"span\", {\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 60\n  },\n  __self: this\n}, React.createElement(\"strong\", {\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 61\n  },\n  __self: this\n}, \"Username:\"), \" \", user.username))));\n\nconst condition = authUser => authUser && !!authUser.roles[ROLES.ADMIN];\n\nexport default compose(withAuthorization(condition), withFirebase)(AdminPage);","map":{"version":3,"sources":["/Users/jiadaye/workspace/cirko/src/components/Admin/index.js"],"names":["React","Component","withFirebase","compose","withAuthorization","ROLES","AdminPage","constructor","props","state","loading","users","componentDidMount","setState","unsubscribe","firebase","onSnapshot","snapshot","forEach","doc","push","data","uid","id","componentWillUnmount","off","render","UserList","map","user","email","username","condition","authUser","roles","ADMIN"],"mappings":";;;;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAASC,YAAT,QAA6B,aAA7B;AAEA,SAASC,OAAT,QAAwB,WAAxB;AACA,SAASC,iBAAT,QAAkC,YAAlC;AACA,OAAO,KAAKC,KAAZ,MAAuB,uBAAvB;;AAEA,MAAMC,SAAN,SAAwBL,SAAxB,CAAkC;AAC9BM,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACf,UAAMA,KAAN;AACA,SAAKC,KAAL,GAAa;AACTC,MAAAA,OAAO,EAAE,KADA;AAETC,MAAAA,KAAK,EAAE;AAFE,KAAb;AAIH;;AACDC,EAAAA,iBAAiB,GAAG;AAChB,SAAKC,QAAL,CAAc;AAAEH,MAAAA,OAAO,EAAE;AAAX,KAAd;AACA,SAAKI,WAAL,GAAmB,KAAKN,KAAL,CAAWO,QAAX,CACdJ,KADc,GAEdK,UAFc,CAEHC,QAAQ,IAAI;AACpB,UAAIN,KAAK,GAAG,EAAZ;AACAM,MAAAA,QAAQ,CAACC,OAAT,CAAiBC,GAAG,IAChBR,KAAK,CAACS,IAAN,mBAAgBD,GAAG,CAACE,IAAJ,EAAhB;AAA4BC,QAAAA,GAAG,EAAEH,GAAG,CAACI;AAArC,SADJ;AAGA,WAAKV,QAAL,CAAc;AACVF,QAAAA,KADU;AAEVD,QAAAA,OAAO,EAAE;AAFC,OAAd;AAIH,KAXc,CAAnB;AAYH;;AAEDc,EAAAA,oBAAoB,GAAG;AACnB,SAAKhB,KAAL,CAAWO,QAAX,CAAoBJ,KAApB,GAA4Bc,GAA5B;AACH;;AACDC,EAAAA,MAAM,GAAG;AAAA,wBACsB,KAAKjB,KAD3B;AAAA,UACGE,KADH,eACGA,KADH;AAAA,UACUD,OADV,eACUA,OADV;AAEL,WACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eADJ,EAEI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qEAFJ,EAMKA,OAAO,IAAI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBANhB,EAOI,oBAAC,QAAD;AAAU,MAAA,KAAK,EAAEC,KAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAPJ,CADJ;AAWH;;AAxC6B;;AA0ClC,MAAMgB,QAAQ,GAAG,CAAC;AAAEhB,EAAAA;AAAF,CAAD,KACb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GACKA,KAAK,CAACiB,GAAN,CAAUC,IAAI,IACX;AAAI,EAAA,GAAG,EAAEA,IAAI,CAACP,GAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GACJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SADF,OACwBO,IAAI,CAACP,GAD7B,CADI,EAII;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GACN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aADM,OACoBO,IAAI,CAACC,KADzB,CAJJ,EAOI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GACN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eADM,OACsBD,IAAI,CAACE,QAD3B,CAPJ,CADH,CADL,CADJ;;AAiBA,MAAMC,SAAS,GAAGC,QAAQ,IACtBA,QAAQ,IAAI,CAAC,CAACA,QAAQ,CAACC,KAAT,CAAe7B,KAAK,CAAC8B,KAArB,CADlB;;AAEA,eAAehC,OAAO,CAClBC,iBAAiB,CAAC4B,SAAD,CADC,EAElB9B,YAFkB,CAAP,CAGbI,SAHa,CAAf","sourcesContent":["import React, { Component } from 'react';\nimport { withFirebase } from '../Firebase';\n\nimport { compose } from 'recompose';\nimport { withAuthorization } from '../Session';\nimport * as ROLES from '../../constants/roles';\n\nclass AdminPage extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            loading: false,\n            users: [],\n        };\n    }\n    componentDidMount() {\n        this.setState({ loading: true });\n        this.unsubscribe = this.props.firebase\n            .users()\n            .onSnapshot(snapshot => {\n                let users = [];\n                snapshot.forEach(doc =>\n                    users.push({ ...doc.data(), uid: doc.id }),\n                );\n                this.setState({\n                    users,\n                    loading: false,\n                });\n            });\n    }\n\n    componentWillUnmount() {\n        this.props.firebase.users().off();\n    }\n    render() {\n        const { users, loading } = this.state;\n        return (\n            <div>\n                <h1>Admin</h1>\n                <p>\n                    The Admin Page is accessible by every signed in admin user.\n                </p>\n\n                {loading && <div>Loading ...</div>}\n                <UserList users={users} />\n            </div>\n        );\n    }\n}\nconst UserList = ({ users }) => (\n    <ul>\n        {users.map(user => (\n            <li key={user.uid}>\n        <span>\n          <strong>ID:</strong> {user.uid}\n        </span>\n                <span>\n          <strong>E-Mail:</strong> {user.email}\n        </span>\n                <span>\n          <strong>Username:</strong> {user.username}\n        </span>\n            </li>\n        ))}\n    </ul>\n);\nconst condition = authUser =>\n    authUser && !!authUser.roles[ROLES.ADMIN];\nexport default compose(\n    withAuthorization(condition),\n    withFirebase,\n)(AdminPage);"]},"metadata":{},"sourceType":"module"}