{"ast":null,"code":"import{withFirebase}from'../Firebase';// Your web app's Firebase configuration\n// Initialize Firebase\n//when user select a picture as a (head-pic)? save it to the storage\nfunction updateImage(firebase,user_ID,Image){return new Promise(function(resolve,reject){//get the storage reference\nvar storage=firebase.storage;var db=firebase.db;var storageRef=storage.ref('images/'+user_ID+'.jpg');//store image to storage\nstorageRef.put(Image).then(function(snapshot){storageRef.getDownloadURL().then(function(url){db.collection(\"users\").doc(user_ID).update({avatarUrl:url}).then(function(){firebase.auth.currentUser.updateProfile({photoURL:url}).then(function(){resolve(\"succeed\");}).catch(function(err){resolve(err.toString());});});});});});}//when user wants to save his profile\n//if no picture selected before? should we just create a no pic?\nfunction updateUserName(firebase,user_ID,user_name/*...*/){return new Promise(function(resolve,reject){var db=firebase.db;console.log(db.collection(\"users\").doc(user_ID));db.collection(\"users\").doc(user_ID).update({username:user_name}).then(function(docRef){firebase.auth.currentUser.updateProfile({displayName:user_name}).then(function(){resolve(\"success\");}).catch(function(err){reject(err.toString());});}).catch(function(error){console.error(\"Error writing user profile to db\",error);});});}//follower wants to follow followed...Or any better name?\nfunction follow(firebase,follower_id,followed_id){//get the database reference\nvar db=firebase.firestore();db.collection(\"users\").doc(follower_id).update({following:firebase.firestore.FieldValue.arrayUnion(followed_id)});db.collection(\"users\").doc(followed_id).update({followers:firebase.firestore.FieldValue.arrayUnion(follower_id)});}//when user share a post and then you will need to save it to the database\n// passing a user obj? and a post object will be a better option.\n// post_id = user_id + \"_post_\" + posts_num.toString();!!! important\nfunction savePostToDB(firebase,user_id,username,posts_num,content,pictures,location,place,callback){//get the database reference\nvar db=firebase.db;//generate post id\nvar post_id=user_id+\"_post_\"+posts_num;posts_num=posts_num*1+1;//generate time\nvar myDate=new Date();var time=myDate.toString();//store post into post db\ndb.collection(\"posts\").doc(post_id).set({userAvatar:firebase.auth.currentUser.photoURL,postId:post_id,userID:user_id,username:username,content:content,location:location,pictures_url:[],comments:[],place:place,likes:[],time:time});//store images and update the url of pictures in database\nsave_multiple_image(firebase,post_id,pictures);//update user data base\ndb.collection(\"users\").doc(user_id).update({posts:firebase.fieldValue.arrayUnion(post_id),posts_num:posts_num}).then(callback());}//when user select a picture as a (head-pic)? save it to the storage\nfunction save_multiple_image(firebase,post_id,Images){//get the storage reference\nvar storage=firebase.storage;var db=firebase.db;for(var i=0;i<Images.length;i++){var storageRef=storage.ref('images/'+post_id+'_'+i.toString()+'.jpg');//store image to storage\nstorageRef.put(Images[i].file).then(function(snapshot){snapshot.ref.getDownloadURL().then(function(url){//update the url in DB\ndb.collection(\"posts\").doc(post_id).update({pictures_url:firebase.fieldValue.arrayUnion(url)});}).catch(function(error){console.error(\"Error writing get URL for the image\",error);});});}}//comments\nfunction comments(firebase,comment_user_id,comment_user_name,comment_user_avatar,content,post_id,callback){//get the database reference\nvar db=firebase.db;//create a comment object\nvar comment={content:content,comment_user_id:comment_user_id,comment_user_name:comment_user_name,comment_user_avatar:comment_user_avatar,post_id:post_id};//update database\n// console.log( firebase.fieldValue.arrayUnion(comment))\ndb.collection(\"posts\").doc(post_id).update({comments:firebase.fieldValue.arrayUnion(comment)}).then(callback);}//\n//like\nfunction likes(firebase,like_user_id,post_id){return new Promise(function(resolve,reject){//get the database reference\nvar db=firebase.db;//update database\ndb.collection(\"posts\").doc(post_id).update({likes:firebase.fieldValue.arrayUnion(like_user_id)}).then(function(){resolve(\"sucecss\");}).catch(function(err){reject(err.toString());});db.collection(\"users\").doc(like_user_id).update({likes:firebase.fieldValue.arrayUnion(post_id)}).then(function(){resolve(\"sucecss\");}).catch(function(err){reject(err.toString());});});}function get_user_profile(firebase,user_id,callback){//get db reference\nvar db=firebase.db;var docRef=db.collection(\"users\").doc(user_id);docRef.get().then(function(doc){if(doc.exists){callback(doc.data());}else{// doc.data() will be undefined in this case\nconsole.log(\"No such document!\");}}).catch(function(error){console.log(\"Error getting document:\",error);});}export{updateImage,updateUserName,comments,follow,savePostToDB,get_user_profile,likes};","map":{"version":3,"sources":["/Users/jiadaye/workspace/cirko/src/components/Firebase/upload.js"],"names":["withFirebase","updateImage","firebase","user_ID","Image","Promise","resolve","reject","storage","db","storageRef","ref","put","then","snapshot","getDownloadURL","url","collection","doc","update","avatarUrl","auth","currentUser","updateProfile","photoURL","catch","err","toString","updateUserName","user_name","console","log","username","docRef","displayName","error","follow","follower_id","followed_id","firestore","following","FieldValue","arrayUnion","followers","savePostToDB","user_id","posts_num","content","pictures","location","place","callback","post_id","myDate","Date","time","set","userAvatar","postId","userID","pictures_url","comments","likes","save_multiple_image","posts","fieldValue","Images","i","length","file","comment_user_id","comment_user_name","comment_user_avatar","comment","like_user_id","get_user_profile","get","exists","data"],"mappings":"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","sourcesContent":["import { withFirebase } from '../Firebase';\n// Your web app's Firebase configuration\n\n// Initialize Firebase\n\n\n//when user select a picture as a (head-pic)? save it to the storage\nfunction updateImage(firebase, user_ID, Image) {\n    return new Promise((resolve, reject)=>{\n        //get the storage reference\n        var storage = firebase.storage;\n        var db= firebase.db;\n        var storageRef = storage.ref('images/' + user_ID + '.jpg');\n        //store image to storage\n        storageRef.put(Image).then(function (snapshot) {\n            storageRef.getDownloadURL().then((url) => {\n                db.collection(\"users\").doc(user_ID).update({\n                    avatarUrl:url\n                }).then(()=>{\n                    firebase.auth.currentUser.updateProfile({\n                        photoURL: url\n                    }).then(() => {\n                        resolve(\"succeed\");\n\n                    }).catch((err) => {\n                       resolve(err.toString())\n                    })\n                })\n            })\n        });\n    });\n\n\n}\n\n//when user wants to save his profile\n//if no picture selected before? should we just create a no pic?\n function updateUserName(firebase, user_ID, user_name/*...*/) {\n   return new Promise((resolve, reject)=>{\n       var db = firebase.db;\n       console.log( db.collection(\"users\").doc(user_ID));\n       db.collection(\"users\").doc(user_ID).update({\n           username: user_name,\n       })\n           .then(function (docRef) {\n               firebase.auth.currentUser.updateProfile({\n                   displayName: user_name\n               }).then(() => {\n                    resolve(\"success\")\n               }).catch((err) => {\n                   reject(err.toString())\n\n               })\n           })\n           .catch(function (error) {\n               console.error(\"Error writing user profile to db\", error);\n           });\n\n   })\n\n\n}\n\n//follower wants to follow followed...Or any better name?\nfunction follow(firebase, follower_id, followed_id) {\n    //get the database reference\n    var db = firebase.firestore();\n    db.collection(\"users\").doc(follower_id).update({\n        following: firebase.firestore.FieldValue.arrayUnion(followed_id)\n    })\n    db.collection(\"users\").doc(followed_id).update({\n        followers: firebase.firestore.FieldValue.arrayUnion(follower_id)\n    })\n}\n\n//when user share a post and then you will need to save it to the database\n// passing a user obj? and a post object will be a better option.\n// post_id = user_id + \"_post_\" + posts_num.toString();!!! important\nfunction savePostToDB(firebase, user_id, username, posts_num, content,  pictures,location, place, callback) {\n    //get the database reference\n    var db = firebase.db;\n    //generate post id\n    var post_id = user_id + \"_post_\" + posts_num;\n    posts_num = posts_num*1 + 1;\n    //generate time\n    var myDate = new Date();\n    var time = myDate.toString();\n\n    //store post into post db\n    db.collection(\"posts\").doc(post_id).set({\n        userAvatar:firebase.auth.currentUser.photoURL,\n        postId:post_id,\n        userID: user_id,\n        username:username,\n        content: content,\n        location: location,\n        pictures_url: [],\n        comments: [],\n\n        place: place,\n        likes: [],\n        time: time\n    });\n\n    //store images and update the url of pictures in database\n    save_multiple_image(firebase, post_id, pictures);\n\n    //update user data base\n    db.collection(\"users\").doc(user_id).update({\n        posts: firebase.fieldValue.arrayUnion(post_id),\n        posts_num: posts_num\n    }).then(\n        callback()\n    )\n}\n\n\n//when user select a picture as a (head-pic)? save it to the storage\nfunction save_multiple_image(firebase, post_id, Images) {\n    //get the storage reference\n    var storage = firebase.storage;\n    var db = firebase.db;\n    for (var i = 0; i < Images.length; i++) {\n        var storageRef = storage.ref('images/' + post_id + '_' + i.toString() + '.jpg');\n        //store image to storage\n        storageRef.put(Images[i].file).then(function (snapshot) {\n            snapshot.ref.getDownloadURL().then(function (url) {\n                //update the url in DB\n                db.collection(\"posts\").doc(post_id).update({\n                    pictures_url: firebase.fieldValue.arrayUnion(url)\n                })\n            })\n                .catch(function (error) {\n                    console.error(\"Error writing get URL for the image\", error);\n                });\n        });\n    }\n}\n\n\n//comments\nfunction comments(firebase, comment_user_id, comment_user_name,comment_user_avatar,content, post_id,callback) {\n    //get the database reference\n    var db = firebase.db;\n    //create a comment object\n    var comment = {content: content, comment_user_id: comment_user_id,comment_user_name,comment_user_avatar, post_id: post_id};\n    //update database\n    // console.log( firebase.fieldValue.arrayUnion(comment))\n    db.collection(\"posts\").doc(post_id).update({comments: firebase.fieldValue.arrayUnion(comment)}).then(\n        callback\n    );\n}\n\n//\n\n//like\nfunction likes(firebase, like_user_id, post_id) {\n    return new Promise((resolve,reject)=>{\n        //get the database reference\n        var db = firebase.db;\n        //update database\n        db.collection(\"posts\").doc(post_id).update({likes: firebase.fieldValue.arrayUnion(like_user_id)}).then(()=>{resolve(\"sucecss\")}).catch(err=>{\n            reject(err.toString())\n        });\n        db.collection(\"users\").doc(like_user_id).update({likes: firebase.fieldValue.arrayUnion(post_id)}).then(()=>{resolve(\"sucecss\")}).catch((err)=>{\n            reject(err.toString())\n        });\n    })\n\n}\n\nfunction get_user_profile(firebase,user_id, callback) {\n    //get db reference\n    var db = firebase.db;\n    var docRef = db.collection(\"users\").doc(user_id);\n\n    docRef.get().then(function(doc) {\n        if (doc.exists) {\n\n            callback(doc.data());\n        } else {\n            // doc.data() will be undefined in this case\n            console.log(\"No such document!\");\n        }\n    }).catch(function(error) {\n        console.log(\"Error getting document:\", error);\n    });\n\n}\nexport { updateImage, updateUserName, comments, follow, savePostToDB,get_user_profile,likes}"]},"metadata":{},"sourceType":"module"}