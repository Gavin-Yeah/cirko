{"ast":null,"code":"function get_all_post_by_id(firebase, user_id, callback) {\n  get_all_post_id_from_db(firebase, user_id, callback);\n}\n\nfunction get_all_liked_posts(firebase, user_id, callback) {\n  let res = [];\n  var db = firebase.db;\n  var docRef = db.collection(\"users\").doc(user_id); //get user\n\n  docRef.get().then(function (doc) {\n    if (doc.exists) {\n      console.log(\"Document data:\");\n      get_posts_from_post_ID_list(firebase, doc.data().likes, callback);\n    } else {\n      // doc.data() will be undefined in this case\n      console.log(\"No such document!\");\n    }\n  });\n}\n\nfunction get_all_post_id_from_db(firebase, user_id, callback) {\n  //get db reference\n  var db = firebase.db;\n  var docRef = db.collection(\"users\").doc(user_id); //get user\n\n  docRef.get().then(function (doc) {\n    if (doc.exists) {\n      console.log(\"Document data:\");\n      get_posts_from_post_ID_list(firebase, doc.data().posts, callback);\n    } else {\n      // doc.data() will be undefined in this case\n      console.log(\"No such document!\");\n    }\n  });\n}\n\nfunction get_posts_from_post_ID_list(firebase, pID_list, callback) {\n  var list_posts = [];\n  let promise = new Promise(function (resolve, reject) {\n    for (var i = 0; i < pID_list.length; i++) {\n      let a = get_post(firebase, pID_list[i]);\n      list_posts.unshift(a);\n    }\n\n    resolve(list_posts);\n  });\n  promise.then(data => {\n    console.log(\"in getpostsfrom post id\", data);\n    callback(data);\n  });\n}\n\nconst get_post = (firebase, post_id) => {\n  //get db reference\n  var db = firebase.db;\n  var docRef = db.collection(\"posts\").doc(post_id);\n  docRef.get().then(function (doc) {\n    if (doc.exists) {\n      //  console.log(\"Document data:\");\n      console.log(doc.data());\n      return doc.data();\n    } else {\n      // doc.data() will be undefined in this case\n      console.log(\"No such document!\");\n    }\n  });\n};\n\nfunction get_all_post(firebase, callback) {\n  let promise = new Promise(function (resolve, reject) {\n    var list_posts = [];\n    help_get_all_post(firebase, post => {\n      list_posts.unshift(post);\n      resolve(list_posts);\n    });\n  });\n  promise.then(data => {\n    console.log(data);\n    callback(data);\n  });\n}\n\nfunction help_get_all_post(firebase, callback) {\n  var db = firebase.db;\n  db.collection(\"posts\").get().then(function (querySnapshot) {\n    querySnapshot.forEach(function (doc) {\n      callback(doc.data());\n    });\n  });\n} // function fliter(firebase,list_posts, distance, user_location, callback){\n//     let location_str = \"\";\n//     let mydestinations = [];\n//     console.log(list_posts);\n//     for(let i = 0; i<list_posts.length; i++) {\n//         mydestinations.push(new google.maps.LatLng(list_posts[i].location.lat, list_posts[i].location.lng));\n//     }\n//     let ori = new google.maps.LatLng(user_location.lat, user_location.lng);\n//     var service = new google.maps.DistanceMatrixService();\n//     let return_list = [];\n//     service.getDistanceMatrix(\n//         {\n//             origins: user_location,\n//             destinations: mydestinations,\n//             travelMode: 'WALKING'\n//         }, ()=>{return_list = fliter_help(response, status, distance, list_posts)\n//             callback(return_list);\n//         });\n// }\n//\n// function fliter_help(response, status, dis, list_posts) {\n//     let distances = [];\n//     let return_list = [];\n//     if (status == 'OK') {\n//         var origins = response.originAddresses;\n//         var destinations = response.destinationAddresses;\n//\n//         for (var i = 0; i < origins.length; i++) {\n//             var results = response.rows[i].elements;\n//             for (var j = 0; j < results.length; j++) {\n//                 var element = results[j];\n//                 var distance = element.distance.text;\n//                 distances.push(distance);\n//                 var duration = element.duration.text;\n//                 var from = origins[i];\n//                 var to = destinations[j];\n//             }\n//         }\n//\n//         for(let i = 0; i < distances.length; i++) {\n//             if(distances[i] < dis) {\n//                 return_list.push(list_posts[i]);\n//             }\n//         }\n//         return return_list;\n//     }\n//     return return_list;\n// }\n\n\nexport { get_all_post_by_id, get_all_post, get_post, get_all_liked_posts };","map":{"version":3,"sources":["/Users/jiadaye/workspace/cirko/src/components/Firebase/getPosts.js"],"names":["get_all_post_by_id","firebase","user_id","callback","get_all_post_id_from_db","get_all_liked_posts","res","db","docRef","collection","doc","get","then","exists","console","log","get_posts_from_post_ID_list","data","likes","posts","pID_list","list_posts","promise","Promise","resolve","reject","i","length","a","get_post","unshift","post_id","get_all_post","help_get_all_post","post","querySnapshot","forEach"],"mappings":"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","sourcesContent":["function get_all_post_by_id(firebase,user_id, callback){\n    get_all_post_id_from_db(firebase,user_id, callback);\n}\n\nfunction get_all_liked_posts(firebase, user_id,callback) {\n    let res=[];\n    var db = firebase.db;\n    var docRef = db.collection(\"users\").doc(user_id);\n    //get user\n    docRef.get().then(function (doc) {\n        if (doc.exists) {\n            console.log(\"Document data:\");\n            get_posts_from_post_ID_list(firebase, doc.data().likes,callback);\n        } else {\n            // doc.data() will be undefined in this case\n            console.log(\"No such document!\");\n        }\n    });\n}\n\n\n\nfunction get_all_post_id_from_db(firebase,user_id, callback){\n    //get db reference\n    var db = firebase.db;\n    var docRef = db.collection(\"users\").doc(user_id);\n    //get user\n    docRef.get().then(function(doc) {\n        if (doc.exists) {\n            console.log(\"Document data:\");\n            get_posts_from_post_ID_list(firebase,doc.data().posts, callback);\n        } else {\n            // doc.data() will be undefined in this case\n            console.log(\"No such document!\");\n        }\n    });\n}\n\nfunction get_posts_from_post_ID_list(firebase, pID_list, callback) {\n    var list_posts = [];\n    let promise = new Promise(  function (resolve, reject) {\n        for (var i = 0; i < pID_list.length; i++) {\n            let a =  get_post(firebase, pID_list[i]);\n           list_posts.unshift(a );\n        }\n        resolve(list_posts)\n    });\n    promise.then((data) => {\n        console.log(\"in getpostsfrom post id\",data)\n        callback(data);\n    })\n\n}\n\nconst get_post = (firebase,post_id) => {\n    //get db reference\n    var db = firebase.db;\n    var docRef = db.collection(\"posts\").doc(post_id);\n\n    docRef.get().then(function(doc) {\n        if (doc.exists) {\n          //  console.log(\"Document data:\");\n            console.log(doc.data())\n           return doc.data();\n        } else {\n            // doc.data() will be undefined in this case\n            console.log(\"No such document!\");\n        }\n    });\n}\nfunction get_all_post(firebase, callback){\n\n    let promise = new Promise(function(resolve, reject){\n        var list_posts = [];\n        help_get_all_post(firebase, (post)=>{list_posts.unshift(post);\n\n            resolve(list_posts)\n\n        })\n\n    });\n    promise.then((data)=>{\n        console.log(data)\n        callback(data);\n    })\n\n}\n\nfunction help_get_all_post(firebase, callback) {\n    var db = firebase.db;\n    db.collection(\"posts\").get().then(function(querySnapshot) {\n        querySnapshot.forEach(function(doc) {\n            callback(doc.data());\n        });\n    });\n}\n\n\n\n\n// function fliter(firebase,list_posts, distance, user_location, callback){\n//     let location_str = \"\";\n//     let mydestinations = [];\n//     console.log(list_posts);\n//     for(let i = 0; i<list_posts.length; i++) {\n//         mydestinations.push(new google.maps.LatLng(list_posts[i].location.lat, list_posts[i].location.lng));\n//     }\n//     let ori = new google.maps.LatLng(user_location.lat, user_location.lng);\n//     var service = new google.maps.DistanceMatrixService();\n//     let return_list = [];\n//     service.getDistanceMatrix(\n//         {\n//             origins: user_location,\n//             destinations: mydestinations,\n//             travelMode: 'WALKING'\n//         }, ()=>{return_list = fliter_help(response, status, distance, list_posts)\n//             callback(return_list);\n//         });\n// }\n//\n// function fliter_help(response, status, dis, list_posts) {\n//     let distances = [];\n//     let return_list = [];\n//     if (status == 'OK') {\n//         var origins = response.originAddresses;\n//         var destinations = response.destinationAddresses;\n//\n//         for (var i = 0; i < origins.length; i++) {\n//             var results = response.rows[i].elements;\n//             for (var j = 0; j < results.length; j++) {\n//                 var element = results[j];\n//                 var distance = element.distance.text;\n//                 distances.push(distance);\n//                 var duration = element.duration.text;\n//                 var from = origins[i];\n//                 var to = destinations[j];\n//             }\n//         }\n//\n//         for(let i = 0; i < distances.length; i++) {\n//             if(distances[i] < dis) {\n//                 return_list.push(list_posts[i]);\n//             }\n//         }\n//         return return_list;\n//     }\n//     return return_list;\n// }\n\n\n\n\n\n\n\n\nexport {get_all_post_by_id,get_all_post, get_post,get_all_liked_posts}"]},"metadata":{},"sourceType":"module"}